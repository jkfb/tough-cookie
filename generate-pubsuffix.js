#!/usr/bin/env node
/*!
 * Copyright (c) 2015, Salesforce.com, Inc.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * 3. Neither the name of Salesforce.com nor the names of its contributors may
 * be used to endorse or promote products derived from this software without
 * specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 */
'use strict';
const fs = require('fs');
const punycode = require('punycode');

fs.readFile('./public_suffix_list.dat', 'utf8', (err, string) => {
  if (err) {
    throw err;
  }
  const lines = string.split('\n');

  process.nextTick(() => {
    processList(lines); // eslint-disable-line no-use-before-define
  });
});

const indexObj = {};
const COMMENT = new RegExp('//.+');

const processList = lines => {
  while (lines.length) {
    let line = lines.shift();

    line = line.replace(COMMENT, '').trim();
    if (!line) {
      continue;
    }
    addToIndex(indexObj, line); // eslint-disable-line no-use-before-define
  }

  const wStream = fs.createWriteStream('./src/pubsuffix.js', {
    flags: 'w',
    encoding: 'utf8',
    mode: 0o644
  });

  wStream.on('end', process.exit);
  wStream.write('/****************************************************\n');
  wStream.write(' * AUTOMATICALLY GENERATED by generate-pubsuffix.js *\n');
  wStream.write(' *                  DO NOT EDIT!                    *\n');
  wStream.write(' ****************************************************/\n\n');

  wStream.write('import punycode from \'./third/punycode.es6\';\n\n');

  wStream.write('export const getPublicSuffix = ');
  wStream.write(getPublicSuffix.toString()); // eslint-disable-line no-use-before-define
  wStream.write(';\n\n');

  wStream.write('// The following generated structure is used under the MPL version 2.0\n');
  wStream.write('// See public-suffix.txt for more information\n\n');
  wStream.write('export var index = Object.freeze(\n');
  wStream.write(JSON.stringify(indexObj));
  wStream.write(');\n\n');
  wStream.write('// END of automatically generated file\n');

  wStream.end();
};

const addToIndex = (index, line) => {
  let prefix = '';

  if (line.replace(/^(!|\*\.)/)) {
    prefix = RegExp.$1;
    line = line.slice(prefix.length);
  }
  line = prefix + punycode.toASCII(line);

  if (line.substr(0, 1) == '!') {
    index[line.substr(1)] = false;
  } else {
    index[line] = true;
  }
};

// include the licence in the function since it gets written to pubsuffix.js
const getPublicSuffix = domain => {
  /*!
   * Copyright (c) 2015, Salesforce.com, Inc.
   * All rights reserved.
   *
   * Redistribution and use in source and binary forms, with or without
   * modification, are permitted provided that the following conditions are met:
   *
   * 1. Redistributions of source code must retain the above copyright notice,
   * this list of conditions and the following disclaimer.
   *
   * 2. Redistributions in binary form must reproduce the above copyright notice,
   * this list of conditions and the following disclaimer in the documentation
   * and/or other materials provided with the distribution.
   *
   * 3. Neither the name of Salesforce.com nor the names of its contributors may
   * be used to endorse or promote products derived from this software without
   * specific prior written permission.
   *
   * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
   * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
   * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
   * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
   * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
   * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
   * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
   * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
   * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
   * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
   * POSSIBILITY OF SUCH DAMAGE.
   */
  if (!domain) {
    return null;
  }
  if (domain.match(/^\./)) {
    return null;
  }

  const asciiDomain = punycode.toASCII(domain);
  let converted = false;

  if (asciiDomain !== domain) {
    domain = asciiDomain;
    converted = true;
  }
  if (index[domain]) {
    return null;
  }

  domain = domain.toLowerCase();
  const parts = domain.split('.').reverse();
  let suffix = '';
  let suffixLen = 0;

  for (let i = 0; i < parts.length; i++) {
    const part = parts[i];
    const starstr = `*${suffix}`;
    const partstr = part + suffix;

    // star rule matches
    if (index[starstr]) {
      suffixLen = i + 1;

      // exception rule matches (NB: false, not undefined)
      if (index[partstr] === false) {
        suffixLen--; // eslint-disable-line no-plusplus
      }

    // exact match, not exception
    } else if (index[partstr]) {
      suffixLen = i + 1;
    }

    suffix = `.${partstr}`;
  }

  // *.domain exists (e.g. *.kyoto.jp for domain='kyoto.jp');
  if (index[`*${suffix}`]) {
    return null;
  }

  suffixLen = suffixLen || 1;

  if (parts.length > suffixLen) {
    const publicSuffix = parts.slice(0, suffixLen + 1)
      .reverse()
      .join('.');

    return converted ? punycode.toUnicode(publicSuffix) : publicSuffix;
  }

  return null;
};
